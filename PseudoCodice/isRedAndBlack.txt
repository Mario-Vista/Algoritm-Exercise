isABR(node, minVal, maxVal){
    if nodo is nil
        return true  // Albero vuoto è un ABR
    if nodo.valore <= minValore o nodo.valore >= maxValore:
        return false  // Violazione della proprietà ABR
    return (isABR(node.left, minVal, node.val),isABR(node.right, node.val, maxVal))
    }

isRedBlackABR(node){
    if isABR{
        // Caso base: un albero vuoto è un Red-Black ABR
        if node = nil
            return true
        
        // Verifica proprietà colore del nodo corrente
        if node.color!=red and node.color!=black
            return false
        
        // Verifica proprietà dei cammini neri
        if contaNeriDaRadice(node) = -1:
            return false
        
        // Verifica ricorsiva per sottoalberi
        return isRedBlackABR(node.left)and isRedBlackABR(node.right)
    } else return false
}

contaNeriDaRadice(nodo){
    // Restituisce l'altezza nera dei cammini dalla radice al nodo corrente
    if node=nil
        return 1  // Nodo nullo contribuisce con un nodo nero
    
    // Calcola altezze nere per sottoalberi
    altezzaNeraSinistro = contaNeriDaRadice(node.left)
    altezzaNeraDestro = contaNeriDaRadice(node.right)
    
    // Verifica che i sottoalberi abbiano la stessa altezza nera
    if altezzaNeraSinistro != altezzaNeraDestro or altezzaNeraSinistro = -1 or altezzaNeraDestro = -1:
        return -1  // Violazione delle proprietà Red-Black
    
    // Aggiunge uno per il nodo corrente
    Se node.color = black:
        return altezzaNeraSinistro + 1
    Se node.color = red:
        return altezzaNeraSinistro
}